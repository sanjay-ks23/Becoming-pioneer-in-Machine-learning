We will strat of todays day with chapter 4, Recursion
The factorial function, is usually denoted as follows: n!, now this equates to 1*2*3**.....n-1*n.
In order to do this you can use a for loop to simple loop and multiply with itself increementing the value by 1 every single loop, or u use recursion ,
using recursion , we call the function over and over again until the condition is met just like in a for loop.
def factorial(n):
    if n==0:
       return 1
    else:
       return n*factorial(n-1)

Taking about lists, sequence based classes in python, the running time of various opertaion are as follows:
 Operation          RunningTime
 len(data)          O(1)
 data[j]            O(1)
 data.count(value)  O(n)
 data.index(value)  O(k+1)
 value in data      O(k+1)
 data1 == data2     O(k+1)
 data[j:k]          O(k− j+1)
 data1 + data2      O(n1+n2)
 c*data             O(cn) 
they are predominanlty linear as they have just one variable manipulating the time whereas for the follwing operations that is not the case:

Operation                       RunningTime
 data[j]=val                    O(1)
 data.append(value)             O(1)∗
 data.insert(k,value)           O(n−k+1)∗
 data.pop()                     O(1)∗
 data.pop(k)                    O(n−k)∗
 deldata[k]
 data.remove(value)             O(n)∗
 data1.extend(data2)            O(n2)∗
 data1+=data2
 data.reverse()                 O(n)
 data.sort()                    O(nlogn),
the * near the running time suggest that they are amortized.?
Mmeorize all this stuff as these are th eoperation that are usually sued when it comes to lists.
