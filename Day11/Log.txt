I completed the Linked list chapter and left out the last case study parts, but tried to write the adt on my own in my notebook and did so sucessfully 
Will be uploading all the problems that I solve on a daily basis.
It might not be much but it is honest work.
I am stARTING OFF WITH MAPS AND DICTIONARIES RIGHT NOW.
I have previously written a lot about adts for all the other data types in my notebook, Now I will do the same for dictionaries,
del M[k] to delete a map with the key k along with its value.
iter(M), similar to for k in M
considereing a dictionary names M, M.get(k,d=None), means: returns M[k] if k exists or else returns a defult value that has been implicity given insidde the object., M.setdefault(k,d) does the same thing as the previous funciton.
M.pop(k,d=None), removes the item wiht key k form the map M and returns its associated value d
M.popitem() does the same as del M[k],
then we have M.clear()
M.keys()
M.values()
M.items()
M.update(M2)
i HAVE TO GO THROUGH ALL THE STRING FUNCTIONS, LIKE ISALPHA() ETC.
In this chapter the final module consists of sets, I am going to go through it and make notes of it in the upcoming lines, but am yet to cover the rest of the topics in the chapter.
we can call them using the collections class availablein python, 
and call them using collections.MutableSet,
the various functions available, predefined, are as follows:
S.add(e) to add an element into the set 
S.discard(e) to remove an element e from the set
e in S
len(S)
iter(S)
S.remove(e), does the same as S.discard but does return an error when there is no elemnt ie in the set, whereas discard does absolutely nothing.
S.pop()
S.clear()
The next grp for comparison between two sets:
 S==T: Return Trueif sets S and T have identical contents.
 S!=T: Return True if sets S and T are not equivalent.
 S <=T: Return Trueif set S is a subset of set T.
 S < T: Return Trueif set S is a proper subset of set T.
 S >=T: Return Trueif set S is a superset of set T.
 S > T: Return Trueif set S is a proper superset of set T.
 S.isdisjoint(T): Return True if sets S and T have no common elements.
and finally, S|T union
S|=T update set S to be an union of S and T
S&T intersection
S&=T similar to union.
S^T, returns a symmetric differnce between S and T i.e, returns a set of elemnts that is in precisely one of the two sets.
S-Treturns a new set that contains elements in Set S but not in T


